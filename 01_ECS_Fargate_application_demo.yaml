Description: >
  This template deploys Container to an AWS Fargate Cluster on user-defined VPC and Subnets. 
   
        
Parameters:

  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on shared yaml template. Refer Cloudformation dashboard in AWS Console to get this.'
    Type: String
    Default: sharedInfra
  
  ClusterName:
    Type: String
    Default: application-fargate-cluster

  ServiceName:
    Type: String
    Default: application

  ImageURI:
    Type: String
    Default: cyparisot/consume-cpu:latest

  # for autoscaling
  MinContainers:
    Type: Number
    Default: 2
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 10
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 50

  HealthCheckPath:
    Type: String
    Default: '/metrics'

  ContainerExposePort:
    Description: TCP/IP Port expose by container
    Type: Number
    Default: 8080

Resources:
  
  PrivateNamespace:
      Type: AWS::ServiceDiscovery::PrivateDnsNamespace
      Properties:
          Name: myprivatedns.com
          Vpc: {'Fn::ImportValue':  !Sub 'vpcid-${ParentVPCStack}'}

  DiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Discovery Service for the Demo Application
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig: 
        FailureThreshold: 1
      Name: !Ref ServiceName
      NamespaceId: !Ref PrivateNamespace

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  TaskDefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: application-fargate-demo
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskIamRole.Arn
      TaskRoleArn: !GetAtt TaskIamRole.Arn
      Memory: 512
      Cpu: 256
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Environment:
            - Name: GF_AUTH_ANONYMOUS_ENABLE
              Value: "false"
            - Name: GF_AUTH_BASIC_ENABLE
              Value: "true"

          Image: !Ref ImageURI
          # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
          # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
          # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
          # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
          # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
          Cpu: 256
          # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
          # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
          # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
          # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
          # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
          Memory: 512
          PortMappings:
            -
              ContainerPort: !Ref ContainerExposePort
          LogConfiguration:
            LogDriver: awslogs
            Options:
                awslogs-group: !Ref LogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: "dashboard"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ClusterName}/${ServiceName}'
      RetentionInDays: 60 

  ServiceDefinition:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTPS
    Properties:
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      Cluster: !Ref ECSCluster
      ServiceName: !Ref ServiceName
      DesiredCount: !Ref MinContainers
       # This may need to be adjusted if the container takes a while to start up
      HealthCheckGracePeriodSeconds: 30
      LoadBalancers: [!Ref LoadBalancer]
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerExposePort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split [",",   {'Fn::ImportValue':  !Sub 'PrivateSubnets-${ParentVPCStack}'}]
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      ServiceRegistries:
       - RegistryArn: !GetAtt DiscoveryService.Arn
         Port: !Ref ContainerExposePort

  TaskIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - ecs.amazonaws.com
                - ec2.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: ApplicationRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: "AllowReadingMetricsFromCloudWatch"
                Effect: Allow
                Action:
                  - "cloudwatch:DescribeAlarmsForMetric"
                  - "cloudwatch:ListMetrics"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:GetMetricData"
                Resource: "*"
              - Sid: "AllowReadingTagsInstancesRegionsFromEC2"
                Effect: Allow
                Action:
                  - "ec2:DescribeTags"
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeRegions"
                Resource: "*"
              - Sid: "AllowReadingResourcesForTags"
                Effect: Allow
                Action:
                  - "tag:GetResources"
                Resource: "*"   

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId:  {'Fn::ImportValue':  !Sub 'vpcid-${ParentVPCStack}'}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerExposePort
          ToPort:  !Ref ContainerExposePort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref ServiceName, LoadBalancerSecurityGroup]]
      VpcId:  {'Fn::ImportValue':  !Sub 'vpcid-${ParentVPCStack}'}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['-', [!Ref ServiceName, TargetGroup]]
      Port: !Ref ContainerExposePort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId:  {'Fn::ImportValue':  !Sub 'vpcid-${ParentVPCStack}'}

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  #Change listener for HTTPS with below andd arn of your certificate

  # ListenerHTTPS:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - TargetGroupArn: !Ref TargetGroup
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTPS
  # # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
  #     Certificates:
  #       - CertificateArn: 'arn:aws:acm:region:123456789012:certificate/00000000-0000-0000-0000-000000000000'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Split [",",   {'Fn::ImportValue': !Sub 'PublicSubnets-${ParentVPCStack}'}]

  AutoScalingTarget:
    DependsOn:
      - ServiceDefinition
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !Ref ServiceName]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than CPU utilization define by AutoScalingTargetValue
        TargetValue: !Ref AutoScalingTargetValue

Outputs:
  ServiceUrl:
    Description: URL to the ALB that serves the front end
    Value: !Sub 'http://${LoadBalancer.DNSName}'

  FargateClusterName:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub '${AWS::StackName}-${ClusterName}'

  DiscoveryService:
    Value: !GetAtt DiscoveryService.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DiscoveryService'
